# Load necessary libraries
library(igraph)

# Read the dataset
data <- read.csv("C:/Users/braha/OneDrive/Desktop/Cardiovascular_Disease_Dataset.csv")

# Select only numeric columns for clustering
numeric_data <- data[sapply(data, is.numeric)]

# Remove rows with NAs
numeric_data <- na.omit(numeric_data)

# Scale the data
scaled_data <- scale(numeric_data)

# Set the number of nearest neighbors
k <- 5

# Compute the distance matrix
distance_matrix <- as.matrix(dist(scaled_data))

# Determine the k-nearest neighbors for each point
knn_list <- apply(distance_matrix, 1, order)[, 1:k]

# Create a matrix to store the edges
edges <- matrix(nrow = 0, ncol = 2)

# Loop through the knn list to create edges
for (i in 1:nrow(scaled_data)) {
  neighbors <- knn_list[i,]
  for (j in neighbors) {
    edges <- rbind(edges, c(i, j))
  }
}

# Create a graph from the edge list
knn_graph <- graph_from_edgelist(edges, directed = FALSE)

# Partition the graph into subclusters using a graph-based algorithm
# Here we use the walktrap community detection algorithm as an example
wt_communities <- cluster_walktrap(knn_graph)

# Convert communities to membership vector
subclusters <- membership(wt_communities)

# Merge subclusters based on dynamic modeling criteria
# This step would require implementing the specific merging criteria of Chameleon
# For simplicity, we'll assume each subcluster is a final cluster
final_clusters <- subclusters

# Plot the clusters
plot(scaled_data, col = final_clusters + 1, pch = 20, main = "Chameleon Clustering of Cardiovascular Disease Data",
     xlab = "restingBP", ylab = "maxheartrate")
legend("topright", legend = unique(final_clusters), 
       col = 1:length(unique(final_clusters)) + 1, pch = 20, 
       title = "Clusters")

# Print the count of points in each cluster
cat("Count of points in each cluster:\n")
print(table(final_clusters))

# Print the cluster assignments
cat("\nCluster assignments for each point:\n")
print(final_clusters)
